# About 
Simple express setup with dotenv, nodemon and cors. 

Customizable exposed WEB_SERVER_NODE_APP_PORT via the build argument (or the default in the `Dockerfile`).
`Dotenv` is optional at this point, as the the simple app doesn't use any `.env` file and just relies on the `process` to being populated with the right vars & values.

# Quick start development guide

## Prerequisites
Docker
Docker-compose v15

In `dev` folder:
Copy `.env.example` to `.env` and customize the variables, if needed.

## Docker Build & Run (Prod)
docker build --no-cache --build-arg WEB_SERVER_NODE_APP_PORT=<APP_PORT> -t <TAG_NAME> . && docker run -it -p <HOST_PORT>:<APP_PORT> <TAG_NAME>

> Root folder (not `./dev`)
docker build --no-cache --build-arg WEB_SERVER_NODE_APP_PORT=2323 -t temp_test . && docker run -it -p 3003:2323 temp_test

(Longer commands just to have a "docker config from scratch"). Once this is final definitive, we can just `docker-compose up -d`.

## Docker Run Dev
`cd dev`
`docker-compose up --detach --build --renew-anon-volumes --force-recreate`

(Longer commands just to have a "docker config from scratch"). Once this is final definitive, we can just `docker-compose --file docker-compose-tests.yml up COMMAND`.

## Run jest in Docker

### Watch tests with debugger
`cd dev`
`docker-compose --file docker-compose-tests.yml up --build --renew-anon-volumes --force-recreate watch-tests`

### All tests
`cd dev`
`docker-compose --file docker-compose-tests.yml up --build --renew-anon-volumes --force-recreate all-tests`

### All tests with coverage
`cd dev`
`docker-compose --file docker-compose-tests.yml up --build --renew-anon-volumes --force-recreate coverage-tests`
